# 18-447 RISC-V 32-bit Simulator Makefile
#
# ECE 18-447
# Carnegie Mellon University
#
# This Makefile compiles the simulator and assembles test into RISC-V code for
# the simulator.
#
# Authors:
# 	- 2016: Brandon Perez

################################################################################
#                           DO NOT MODIFY THIS FILE!                           #
#                  You should only add files or change sim.c!                  #
################################################################################

################################################################################
# User Controlled Parameters
################################################################################

# The user can specify the test they want to assemble. Defaults to addi.s
DEFAULT_TEST = 447inputs/addi.s
TEST ?= $(DEFAULT_TEST)

################################################################################
# General Targets and Variables
################################################################################

# Terminal color and modifier attributes
# Return to the normal terminal colors
n := $(shell tput sgr0)
# Red color
r := $(shell tput setaf 1)
# Green color
g := $(shell tput setaf 2)
# Bold text
b := $(shell tput bold)
# Underlined text
u := $(shell tput smul)

# These targets don't correspond to actual generated files
.PHONY: all default clean veryclean

# By default, compile the simulator
all default: sim

# Cleanup the intermediate files generated by compiling the simulator
clean: sim-clean

# Cleanup the intermediate files generated by assemling test programs
veryclean: clean assemble-veryclean

################################################################################
# Assemble Test Programs
################################################################################

# These targets don't correspond to actual files
.PHONY: assemble assemble-veryclean

# The name of the entrypoint for assembly tests, which matches the typical main
RISCV_ENTRY_POINT = main

# The addresses of the data and text sections in the program
RISCV_TEXT_START = 0x00400000
RISCV_DATA_START = 0x10000000

# The compiler for assembly files, along with its flags
RISCV_CC = riscv64-unknown-elf-gcc
RISCV_CFLAGS = -Wall -Wextra -static -nostdlib -nostartfiles -m32
RISCV_AS_LDFLAGS = -Wl,-e$(RISCV_ENTRY_POINT)
RISCV_LDFLAGS = -Wl,--section=.text=$(RISCV_TEXT_START) \
				-Wl,--section=.data=$(RISCV_DATA_START)

# The objcopy utility for ELF files, along with its flags
RISCV_OBJCOPY = riscv64-unknown-elf-objcopy
RISCV_OBJCOPY_FLAGS = -O binary

# The objdump utility for ELF files, along with its flags
RISCV_OBJDUMP = riscv64-unknown-elf-objdump
RISCV_OBJDUMP_FLAGS = -d

# The compiler for hex files, which convert copied binary to ASCII hex files,
# where there is one word per line.
HEX_CC = hexdump
HEX_CFLAGS = -e '1/4 "%08x" "\n"'

# The runtime environment directory, which has the startup file for C programs
447_RUNTIME_DIR = 447runtime
RISCV_STARTUP_FILE = $(447_RUNTIME_DIR)/crt0.S

# The sections of the ELF executable that we parse out, and file extensions
SECTIONS = text data ktext kdata
ELF_EXTENSION = elf
BINARY_EXTENSION = bin
HEX_EXTENSION = hex
DISAS_EXTENSION = disassembly.s

# The name of the test, and the hex and ELF files generated for the given test
TEST_NAME = $(basename $(TEST))
TEST_EXECUTABLE = $(addsuffix .$(ELF_EXTENSION), $(TEST_NAME))
TEST_SECTIONS = $(addprefix $(TEST_NAME).,$(SECTIONS))
TEST_SECTIONS_HEX = $(addsuffix .$(HEX_EXTENSION),$(TEST_SECTIONS))
TEST_DISASSEMBLY = $(addsuffix .$(DISAS_EXTENSION),$(TEST_NAME))

# Assemble the program specified by the user on the command line
assemble: $(TEST_SECTIONS_HEX) $(TEST_DISASSEMBLY)

# Convert a binary file for program of the ELF file to an ASCII hex
%.$(HEX_EXTENSION): %.$(BINARY_EXTENSION) | assemble-check-hex-compiler
	$(HEX_CC) $(HEX_CFLAGS) $^ > $@

# Extract the given section from the program ELF file, generating a binary
$(TEST_NAME).%.$(BINARY_EXTENSION): $(TEST_EXECUTABLE) | assemble-check-objcopy
	$(RISCV_OBJCOPY) $(RISCV_OBJCOPY_FLAGS) -j .$* $^ $@

# Generate a dissabemly of the compiled program for debugging pruposes
%.$(DISAS_EXTENSION): %.$(ELF_EXTENSION) | assemble-check-objdump
	$(RISCV_OBJDUMP) $(RISCV_OBJDUMP_FLAGS) $^ > $@

# Compile the assembly test program with a *.s extension to create an ELF file
%.$(ELF_EXTENSION): %.s | assemble-check-compiler assemble-check-test
	$(RISCV_CC) $(RISCV_CFLAGS) $(RISCV_LDFLAGS) $(RISCV_AS_LDFLAGS) $^ -o $@

# Compile the assembly test program with a *.S extension to create an ELF file
%.$(ELF_EXTENSION): %.S | assemble-check-compiler assemble-check-test
	$(RISCV_CC) $(RISCV_CFLAGS) $(RISCV_LDFLAGS) $(RISCV_AS_LDFLAGS) $^ -o $@

# Compile the C test program with the startup file to create an ELF file
%.$(ELF_EXTENSION): $(RISCV_STARTUP_FILE) %.c | assemble-check-compiler \
		assemble-check-test
	$(RISCV_CC) $(RISCV_CFLAGS) $(RISCV_LDFLAGS) $^ -o $@

# Clean up all the hex files in project directories
assemble-veryclean:
	rm -f $$(find -name '*.$(HEX_EXTENSION)' -o -name '*.$(BINARY_EXTENSION)' \
			-o -name '*.$(ELF_EXTENSION)' -o -name '*.$(DISAS_EXTENSION)')

# Suppresses 'no rule to make...' error when the TEST doesn't exist
$(TEST):

# Check that the RISC-V compiler exists
assemble-check-compiler:
ifeq ($(shell which $(RISCV_CC) 2> /dev/null),)
	@printf "$rError: $u$(RISCV_CC)$n$r: RISC-V compiler was not found in "
	@printf "your PATH.$n\n"
	@exit 1
endif

# Check that the specified test file exists
assemble-check-test:
ifeq ($(wildcard $(TEST)),)
	@printf "$rError: $u$(TEST)$n$r: RISC-V test file does not exist.$n\n"
	@exit 1
endif

# Check that the RISC-V objcopy binary utility exists
assemble-check-objcopy:
ifeq ($(shell which $(RISCV_OBJCOPY) 2> /dev/null),)
	@printf "$rError: $u$(RISCV_OBJCOPY)$n$r: RISC-V objcopy binary utility "
	@printf "was not found in your PATH.$n\n"
	@exit 1
endif

# Check that the RISC-V objdump binary utility exists
assemble-check-objdump:
ifeq ($(shell which $(RISCV_OBJDUMP) 2> /dev/null),)
	@printf "$rError: $u$(RISCV_OBJDUMP)$n$r: RISC-V objdump binary utility "
	@printf "was not found in your PATH.$n\n"
	@exit 1
endif

# Check that the hex compiler exists (converts binary to ASCII hex)
assemble-check-hex-compiler:
ifeq ($(shell which $(HEX_CC) 2> /dev/null),)
	@printf "$rError: $u$(HEX_CC)$n$r: Hex dump utility was not found in your "
	@printf "PATH.\n"
	@exit 1
endif

################################################################################
# Compile the Simulator
################################################################################

# These targets don't correspond to actual files
.PHONY: sim sim-clean

# The compiler for the simulator, along with its flags
SIM_CC = gcc
SIM_CFLAGS = -Wall -Wextra -std=gnu99 -pedantic -g \
			 -Werror=implicit-function-declaration

# The directory for the simulator source files, and all of the files for it
SIM_SRC_DIR = src
SIM = $(shell find $(SIM_SRC_DIR) -type f -name '*.c' -o -name '*.h')

# The name of the exeuctable generated by compiling the simulator
SIM_EXECUTABLE = riscv-sim

# User-facing target to compile the simulator into an executable
sim: $(SIM_EXECUTABLE)

# Compile the simulator into an executable
$(SIM_EXECUTABLE): $(SIM)
	$(SIM_CC) $(SIM_CFLAGS) $(filter %.c,$^) -o $@

# Cleanup any intermediate files generated by compiling the simulator
sim-clean:
	rm -f $(SIM_EXECUTABLE)
